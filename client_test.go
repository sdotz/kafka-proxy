// Code generated by mocker; DO NOT EDIT
// github.com/travisjeffery/mocker
package kafkaproxy_test

import (
	"context"
	"sync"
)

var (
	lockMockClientRun sync.RWMutex
)

// MockClient is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &MockClient{
//             RunFunc: func(ctx context.Context,req interface{}) (interface{}, error) {
// 	               panic("TODO: mock out the Run method")
//             },
//         }
//
//         // TODO: use mockedClient in code that requires Client
//         //       and then make assertions.
//
//     }
type MockClient struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, req interface{}) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req interface{}
		}
	}
}

// Reset resets the calls made to the mocked APIs.
func (mock *MockClient) Reset() {
	lockMockClientRun.Lock()
	mock.calls.Run = nil
	lockMockClientRun.Unlock()
}

// Run calls RunFunc.
func (mock *MockClient) Run(ctx context.Context, req interface{}) (interface{}, error) {
	if mock.RunFunc == nil {
		panic("moq: MockClient.RunFunc is nil but Client.Run was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req interface{}
	}{
		Ctx: ctx,
		Req: req,
	}
	lockMockClientRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockMockClientRun.Unlock()
	return mock.RunFunc(ctx, req)
}

// RunCalled returns true if at least one call was made to Run.
func (mock *MockClient) RunCalled() bool {
	lockMockClientRun.RLock()
	defer lockMockClientRun.RUnlock()
	return len(mock.calls.Run) > 0
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedClient.RunCalls())
func (mock *MockClient) RunCalls() []struct {
	Ctx context.Context
	Req interface{}
} {
	var calls []struct {
		Ctx context.Context
		Req interface{}
	}
	lockMockClientRun.RLock()
	calls = mock.calls.Run
	lockMockClientRun.RUnlock()
	return calls
}
